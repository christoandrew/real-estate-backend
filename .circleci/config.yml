# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
    # specify the version you desire here
    # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
    - image: circleci/python:2.7

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
    - checkout

    - run:
        name: Install awscli
        command: |
          sudo pip install awsebcli --upgrade

    - run:
        name: Create AWS credentials manually
        command: |
          mkdir ~/.aws
          touch ~/.aws/config
          chmod 600 ~/.aws/config
          echo "[profile eb-cli]" > ~/.aws/config
          echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/config
          echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/config
    - run:
        name: Deploy to EB if branch is Master
        command: |
          eb use real-estate-dev --profile eb-cli
          eb deploy -v --staged --profile eb-cli

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "requirements.txt" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

    - run:
        name: install dependencies
        command: |
          python3 -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt

    - save_cache:
        paths:
        - ./venv
        key: v1-dependencies-{{ checksum "requirements.txt" }}

    # run tests!
    # this example uses Django's built-in test-runner
    # other common Python testing frameworks include pytest and nose
    # https://pytest.org
    # https://nose.readthedocs.io
    #      - run:
    #          name: run tests
    #          command: |
    #            . venv/bin/activate
    #            python manage.py test

    - store_artifacts:
        path: test-reports
        destination: test-reports

    deployment:
      staging:
        branch: master
        codedeploy:
          appname-1234:
            application_root: /
            region: us-east-1
            revision_location:
              revision_type: S3
              s3_location:
                bucket: my-bucket
                key_pattern: appname-1234-{BRANCH}-{SHORT_COMMIT}
            deployment_group: my-deployment-group
workflows:
  version: 2
  build-deploy:
    jobs:
    - deploy:
        filters:
          branches:
            only:
            - master
            - develop